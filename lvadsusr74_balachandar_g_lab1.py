# -*- coding: utf-8 -*-
"""LVADSUSR74-BALACHANDAR G-Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aDvH3SpVpwr5UkVXn9-xOs8sJm7IOKyL
"""

#LINEAR REGRESSION
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression

df = pd.read_csv("/content/drive/MyDrive/expenses.csv")
df.info()

#checking for null values
print(df.isnull().sum())

#The missing values are dropped
#df.fillna(df.mean(),inplace= True)
df.dropna(inplace = True)

#printing any duplicate values
print("The duplicate value found in the dataset:",df.duplicated().sum())

#droping the duplicates
df.drop_duplicates(inplace = True)
df.info()

#checking for outliers
df_55=pd.DataFrame(df)
iso = IsolationForest(contamination=0.1)
outliers = iso.fit_predict(df_55[['age','bmi']])
rejected_outliers = df_55.iloc[np.where(outliers == 1)]
print("The dataset after removing the outliers","\n",rejected_outliers)

#converting categorical to numeric
encoder = OneHotEncoder()
encoded_data = encoder.fit_transform(rejected_outliers[['sex','smoker','age','bmi','children','charges']])
encoded_df = pd.DataFrame(encoded_data.toarray())
print("The encoded dataset:","\n",encoded_df)

X_train = rejected_outliers[['age','bmi']]
y_train = rejected_outliers['charges']

X_test = rejected_outliers[['age','bmi']]
y_test = rejected_outliers['charges']

#The training and the test data has been split into 90:10 ratio
X_train,X_test,y_train,y_test = train_test_split(X_train,y_train,test_size = 0.1,random_state= 42)

clf = LinearRegression()
clf.fit(X_train,y_train)
predict_value = clf.predict(X_test)

print("The predicted charges for the given features:","\n",predict_value)

#Visualising the Data
plt.scatter(X_test['bmi'],y_test, color='blue')
plt.title('Linear Regression')
plt.xlabel('X')
plt.ylabel('y')
plt.show()