# -*- coding: utf-8 -*-
"""LVADSUSR74 -BALACHANDAR G- Lab 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10gEvE541gnUl98dEOpc4Ernb_1_DWxK_
"""

#CLASSIFICATION:DECISION TREE
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder

df = pd.read_csv("/content/drive/MyDrive/booking.csv")
df.info()

#checking for null values
print(df.isnull().sum())

#The missing values are dropped
#df.fillna(df.mean(),inplace= True)
df.dropna(inplace = True)

#printing any duplicate values
print("The duplicate value found in the dataset:",df.duplicated().sum())

#droping the duplicates
df.drop_duplicates(inplace = True)

#checking for outliers

df_55=pd.DataFrame(df)
iso = IsolationForest(contamination=0.1)
outliers = iso.fit_predict(df_55[['car parking space','average price','special requests']])
rejected_outliers = df_55.iloc[np.where(outliers==1)]

#converting categorical to numeric
encoder = OneHotEncoder()
encoded_data = encoder.fit_transform(rejected_outliers[['room type','type of meal','booking status']])
encoded_df = pd.DataFrame(encoded_data.toarray())
print(encoded_df)

X_train = rejected_outliers[['average price','special requests']]
y_train = rejected_outliers['booking status']

X_test = rejected_outliers[['average price','special requests']]
y_test = rejected_outliers['booking status']

#The training and the test data are splitted into 70:30
X_train,X_test,y_train,y_test = train_test_split(X_train,y_train,test_size = 0.3,random_state= 42)

clf = DecisionTreeClassifier()
clf.fit(X_train,y_train)
predict_value = clf.predict(X_test)

print("The predicted value:","\n",predict_value)

#Identifying the Accuracy
score = clf.score(X_test,predict_value)
print("The accuracy score of the datasets:",score)